services:
  # PostgreSQL Database for Traceability System
  postgres:
    image: postgres:15-alpine
    container_name: traceability-postgres
    environment:
      POSTGRES_DB: traceability
      POSTGRES_USER: traceuser
      POSTGRES_PASSWORD: tracepass123
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    networks:
      - traceability-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U traceuser -d traceability"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Coreflux Broker
  coreflux-broker:
    image: coreflux/coreflux-mqtt-broker:latest
    container_name: traceability-coreflux
    ports:
      - "1883:1883"
      - "5000:5000"  # WebSocket MQTT
    volumes:
      - ./config:/app/config
      - ./routes:/app/routes
      - ./data:/app/data
      - ./logs:/app/logs
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
    networks:
      - traceability-network
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped

  # Optional: pgAdmin for database management
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: traceability-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@traceability.com
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - traceability-network
    depends_on:
      - postgres
    restart: unless-stopped

  # React Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: traceability-frontend
    ports:
      - "3000:3000"
    networks:
      - traceability-network
    depends_on:
      - coreflux-broker
    restart: unless-stopped
    environment:
      - REACT_APP_MQTT_BROKER=traceability-coreflux
      - REACT_APP_MQTT_PORT=5000
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

volumes:
  postgres_data:
    driver: local
  pgadmin_data:
    driver: local

networks:
  traceability-network:
    driver: bridge 
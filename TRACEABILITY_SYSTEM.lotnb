[
  {
    "kind": 1,
    "language": "markdown",
    "value": "# Traceability System Documentation\r\n\r\n## Overview\r\n\r\nThe Traceability System is a comprehensive solution for tracking parts through different production stations using Coreflux Broker and PostgreSQL. It provides full CRUD operations for parts, stations, operators, and movement tracking with real-time verification capabilities.\r\n\r\n## 🏗️ System Architecture\r\n\r\n```\r\n┌─────────────────┐    ┌──────────────────┐    ┌─────────────────┐\r\n│   MQTT Client   │───▶│  Coreflux Broker │───▶│   PostgreSQL    │\r\n│   (Station/     │    │                  │    │   Database      │\r\n│    Operator)    │    │                  │    │                 │\r\n└─────────────────┘    └──────────────────┘    └─────────────────┘\r\n                              │\r\n                              ▼\r\n                       ┌──────────────────┐\r\n                       │   Web Interface  │\r\n                       │   (pgAdmin)      │\r\n                       └──────────────────┘\r\n```\r\n\r\n## 🚀 Quick Start\r\n\r\n"
  },
  {
    "kind": 1,
    "language": "markdown",
    "value": "\r\n### 1. Start the System\r\n"
  },
  {
    "kind": 2,
    "language": "shellscript",
    "value": "# Start all services\ndocker-compose -f docker-compose-traceability.yml up -d\n# Check service status\ndocker-compose -f docker-compose-traceability.yml ps"
  },
  {
    "kind": 1,
    "language": "markdown",
    "value": "\r\n### 2. Access Services\r\n\r\n- **Coreflux Broker**: http://localhost:8080\r\n- **pgAdmin**: http://localhost:5050 (admin@traceability.com / admin123)\r\n- **PostgreSQL**: localhost:5432\r\n\r\n## 📊 Database Schema\r\n\r\n### Core Tables\r\n\r\n#### 1. Parts Table\r\n```sql\r\nparts (\r\n    id SERIAL PRIMARY KEY,\r\n    part_id VARCHAR(50) UNIQUE NOT NULL,\r\n    part_name VARCHAR(255) NOT NULL,\r\n    part_type VARCHAR(100) NOT NULL,\r\n    manufacturer VARCHAR(255),\r\n    status VARCHAR(50) DEFAULT 'created',\r\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\r\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\r\n)\r\n```\r\n\r\n#### 2. Stations Table\r\n```sql\r\nstations (\r\n    id SERIAL PRIMARY KEY,\r\n    station_id VARCHAR(50) UNIQUE NOT NULL,\r\n    station_name VARCHAR(255) NOT NULL,\r\n    station_type VARCHAR(100) NOT NULL,\r\n    location VARCHAR(255),\r\n    status VARCHAR(50) DEFAULT 'active',\r\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\r\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\r\n)\r\n```\r\n\r\n#### 3. Operators Table\r\n```sql\r\noperators (\r\n    id SERIAL PRIMARY KEY,\r\n    operator_id VARCHAR(50) UNIQUE NOT NULL,\r\n    operator_name VARCHAR(255) NOT NULL,\r\n    badge_id VARCHAR(50) UNIQUE,\r\n    department VARCHAR(100),\r\n    status VARCHAR(50) DEFAULT 'active',\r\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\r\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\r\n)\r\n```\r\n\r\n#### 4. Part Movements Table\r\n```sql\r\npart_movements (\r\n    id SERIAL PRIMARY KEY,\r\n    part_id VARCHAR(50) NOT NULL,\r\n    from_station_id VARCHAR(50),\r\n    to_station_id VARCHAR(50) NOT NULL,\r\n    movement_type VARCHAR(50) DEFAULT 'transfer',\r\n    operator_id VARCHAR(50),\r\n    notes TEXT,\r\n    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\r\n    FOREIGN KEY (part_id) REFERENCES parts(part_id),\r\n    FOREIGN KEY (from_station_id) REFERENCES stations(station_id),\r\n    FOREIGN KEY (to_station_id) REFERENCES stations(station_id),\r\n    FOREIGN KEY (operator_id) REFERENCES operators(operator_id)\r\n)\r\n```\r\n\r\n## 🔧 Route Configuration\r\n\r\nAfter connection to the MQTT Broker by filling the address, it should be : \r\n1) Connect to the mqtt broker and fill in the details. By default:\r\n- **host**: mqtt://localhost:1883  \r\n- **user**: root  \r\n- **pass**: coreflux\r\n2) Upload the cell Free Tier for a Coreflux MQTT Broker without a license\r\n-------------------\r\n![alt text](./img/connect&download.gif)\r\n\r\n\r\n------------------\r\n\r\n\r\n### 🏷️ Choosing the Right Route\r\n\r\nTraceabilityFree → ideal for labs, testing, or education. Uses 8 core events.\r\n\r\nTraceabilityDB → for full-scale production lines with advanced tracking and SQL logic.\r\n\r\n🔐 Need help choosing or upgrading? Reach out at https://www.coreflux.org/contact-us\r\n\r\n\r\n### Community (Free Tier Coreflux Broker)\r\n\r\nThe traceability system uses a SQL route with PostgreSQL. Add the route configuration to your Coreflux routes file:\r\n"
  },
  {
    "kind": 2,
    "language": "lot",
    "value": "DEFINE ROUTE TraceabilityFree WITH TYPE POSTGRESQL\r\n    ADD SQL_CONFIG\r\n        WITH SERVER \"traceability-postgres\"\r\n        WITH PORT 5432\r\n        WITH DATABASE \"traceability\"\r\n        WITH USERNAME \"traceuser\"\r\n        WITH PASSWORD \"tracepass123\"\r\n        WITH USE_SSL FALSE\r\n        WITH TRUST_SERVER_CERTIFICATE FALSE\r\n    ADD EVENT CreatePart\r\n        WITH QUERY \"INSERT INTO parts (part_id, part_name, part_type, manufacturer, created_at, status) VALUES ('{payload.json.part_id}', '{payload.json.part_name}', '{payload.json.part_type}', '{payload.json.manufacturer}', NOW(), 'created') RETURNING *\"\r\n        WITH SOURCE_TOPIC \"coreflux/factory01/traceability/part/create\" \r\n    ADD EVENT SelectParts\r\n        WITH QUERY \"SELECT * FROM parts\"\r\n        WITH SOURCE_TOPIC \"coreflux/factory01/traceability/part/list\"\r\n        WITH DESTINATION_TOPIC \"coreflux/factory01/traceability/part/list/result\"\r\n    ADD EVENT DeletePart\r\n        WITH QUERY \"DELETE FROM parts WHERE part_id = '{payload.json.part_id}' RETURNING *\"\r\n        WITH SOURCE_TOPIC \"coreflux/factory01/traceability/part/delete\"\r\n    ADD EVENT UpdatePartStatus\r\n        WITH QUERY \"UPDATE parts SET status = '{payload.json.status}', updated_at = NOW() WHERE part_id = '{payload.json.part_id}' RETURNING *\"\r\n        WITH SOURCE_TOPIC \"coreflux/factory01/traceability/part/updatestatus\"\r\n    ADD EVENT ListAllStations\r\n        WITH QUERY \"SELECT * FROM stations ORDER BY station_name\"\r\n        WITH SOURCE_TOPIC \"coreflux/factory01/traceability/station/list\"\r\n        WITH DESTINATION_TOPIC \"coreflux/factory01/traceability/station/list/result\"\r\n    ADD EVENT GetStationInfo\r\n        WITH QUERY \"SELECT * FROM stations WHERE station_id = '{payload.json.station_id}'\"\r\n        WITH SOURCE_TOPIC \"coreflux/factory01/traceability/station/get\"\r\n        WITH DESTINATION_TOPIC \"coreflux/factory01/traceability/station/info\"\r\n    ADD EVENT RecordPartMovement\r\n        WITH QUERY \"INSERT INTO part_movements (part_id, from_station_id, to_station_id, movement_type, operator_id, notes, timestamp) VALUES ('{payload.json.part_id}', '{payload.json.from_station_id}', '{payload.json.to_station_id}', '{payload.json.movement_type}', '{payload.json.operator_id}', '{payload.json.notes}', NOW()) RETURNING *\"\r\n        WITH SOURCE_TOPIC \"coreflux/factory01/traceability/movement/record\"\r\n    ADD EVENT GetPartHistory\r\n        WITH QUERY \"SELECT * FROM part_movements WHERE part_id = '{payload.json.part_id}' ORDER BY timestamp DESC LIMIT 50\"\r\n        WITH SOURCE_TOPIC \"coreflux/factory01/traceability/part/history\"\r\n        WITH DESTINATION_TOPIC \"coreflux/factory01/traceability/part/history/result\"\r\n    ADD EVENT ListAllOperators\r\n        WITH QUERY \"SELECT * FROM operators ORDER BY operator_name\"\r\n        WITH SOURCE_TOPIC \"coreflux/factory01/traceability/operator/list\"\r\n        WITH DESTINATION_TOPIC \"coreflux/factory01/traceability/operator/list/result\"\r\n    ADD EVENT GetStationActivity\r\n        WITH QUERY \"SELECT * FROM part_movements WHERE to_station_id = '{payload.json.station_id}' AND timestamp >= NOW() - INTERVAL '24 hours'\"\r\n        WITH SOURCE_TOPIC \"coreflux/factory01/traceability/station/activity\"\r\n        WITH DESTINATION_TOPIC \"coreflux/factory01/traceability/station/activity/result\"\r\n    ADD EVENT ShowPartMovement\r\n        WITH QUERY \"SELECT * FROM part_movements\"\r\n        WITH SOURCE_TOPIC \"coreflux/factory01/traceability/movement/list\"\r\n        WITH DESTINATION_TOPIC \"coreflux/factory01/traceability/movement/list/result\"\r\n    ADD EVENT GetSystemStats\r\n        WITH QUERY \"SELECT (SELECT COUNT(*) FROM parts) as total_parts, (SELECT COUNT(*) FROM stations) as total_stations, (SELECT COUNT(*) FROM operators) as total_operators,(SELECT COUNT(*) FROM part_movements WHERE timestamp >= NOW() - INTERVAL '24 hours') as movements_24h\"\r\n        WITH SOURCE_TOPIC \"coreflux/factory01/traceability/system/stats\"\r\n        WITH DESTINATION_TOPIC \"coreflux/factory01/traceability/system/stats/result\""
  },
  {
    "kind": 1,
    "language": "markdown",
    "value": "### Entreprise Tier Coreflux Broker - all funcionalities\r\n\r\nThe traceability system uses a SQL route with PostgreSQL. Add the route configuration to your Coreflux routes file:"
  },
  {
    "kind": 2,
    "language": "lot",
    "value": "DEFINE ROUTE TraceabilityDB WITH TYPE POSTGRESQL\r\n    ADD SQL_CONFIG\r\n        WITH SERVER \"traceability-postgres\"\r\n        WITH PORT 5432\r\n        WITH DATABASE \"traceability\"\r\n        WITH USERNAME \"traceuser\"\r\n        WITH PASSWORD \"tracepass123\"\r\n        WITH USE_SSL FALSE\r\n        WITH TRUST_SERVER_CERTIFICATE FALSE\r\n    ADD EVENT CreatePart\r\n        WITH QUERY \"INSERT INTO parts (part_id, part_name, part_type, manufacturer, created_at, status) VALUES ('{payload.json.part_id}', '{payload.json.part_name}', '{payload.json.part_type}', '{payload.json.manufacturer}', NOW(), 'created') RETURNING *\"\r\n        WITH SOURCE_TOPIC \"coreflux/factory01/traceability/part/create\"\r\n    ADD EVENT UpdatePartStatus\r\n        WITH QUERY \"UPDATE parts SET status = '{status}', updated_at = NOW() WHERE part_id = '{payload.json.part_id}' RETURNING *\"\r\n        WITH SOURCE_TOPIC \"coreflux/factory01/traceability/part/updatestatus\"\r\n    ADD EVENT GetPartInfo\r\n        WITH QUERY \"SELECT * FROM parts WHERE part_id = '{payload.json.part_id}'\"\r\n        WITH SOURCE_TOPIC \"coreflux/factory01/traceability/part/get\"\r\n        WITH DESTINATION_TOPIC \"coreflux/factory01/traceability/part/info\"\r\n    ADD EVENT ListAllParts\r\n        WITH QUERY \"SELECT * FROM parts ORDER BY created_at DESC LIMIT {payload.json.limit}\"\r\n        WITH SOURCE_TOPIC \"coreflux/factory01/traceability/part/list\"\r\n        WITH DESTINATION_TOPIC \"coreflux/factory01/traceability/part/list/result\"\r\n    ADD EVENT DeletePart\r\n        WITH QUERY \"DELETE FROM parts WHERE part_id = '{payload.json.part_id}' RETURNING *\"\r\n        WITH SOURCE_TOPIC \"coreflux/factory01/traceability/part/delete\"\r\n    ADD EVENT CreateStation\r\n        WITH QUERY \"INSERT INTO stations (station_id, station_name, station_type, location, created_at) VALUES ('{payload.json.station_id}', '{payload.json.station_name}', '{payload.json.station_type}', '{payload.json.location}', NOW()) RETURNING *\"\r\n        WITH SOURCE_TOPIC \"coreflux/factory01/traceability/station/create\"\r\n    ADD EVENT GetStationInfo\r\n        WITH QUERY \"SELECT * FROM stations WHERE station_id = '{payload.json.station_id}'\"\r\n        WITH SOURCE_TOPIC \"coreflux/factory01/traceability/station/get\"\r\n        WITH DESTINATION_TOPIC \"coreflux/factory01/traceability/station/info\"\r\n    ADD EVENT ListAllStations\r\n        WITH QUERY \"SELECT * FROM stations ORDER BY station_name\"\r\n        WITH SOURCE_TOPIC \"coreflux/factory01/traceability/station/list\"\r\n        WITH DESTINATION_TOPIC \"coreflux/factory01/traceability/station/list/result\"\r\n    ADD EVENT RecordPartMovement\r\n        WITH QUERY \"INSERT INTO part_movements (part_id, from_station_id, to_station_id, movement_type, operator_id, notes, timestamp) VALUES ('{payload.json.part_id}', '{payload.json.from_station_id}', '{payload.json.to_station_id}', '{payload.json.movement_type}', '{payload.json.operator_id}', '{payload.json.notes}', NOW()) RETURNING *\"\r\n        WITH SOURCE_TOPIC \"coreflux/factory01/traceability/movement/record\"\r\n    ADD EVENT GetPartHistory\r\n        WITH QUERY \"SELECT * FROM part_movements WHERE part_id = '{payload.json.part_id}' ORDER BY timestamp DESC LIMIT 100\"\r\n        WITH SOURCE_TOPIC \"coreflux/factory01/traceability/part/history\"\r\n        WITH DESTINATION_TOPIC \"coreflux/factory01/traceability/part/history/result\"\r\n    ADD EVENT VerifyPartAtStation\r\n        WITH QUERY \"SELECT * FROM part_movements WHERE part_id = '{part_id}' AND to_station_id = '{payload.json.station_id}' ORDER BY timestamp DESC LIMIT 1\"\r\n        WITH SOURCE_TOPIC \"coreflux/factory01/traceability/verification/check\"\r\n        WITH DESTINATION_TOPIC \"coreflux/factory01/traceability/verification/result\"\r\n    ADD EVENT GetStationActivity\r\n        WITH QUERY \"SELECT * FROM part_movements WHERE to_station_id = '{payload.json.station_id}' AND timestamp >= NOW() - INTERVAL '24 hours'\"\r\n        WITH SOURCE_TOPIC \"coreflux/factory01/traceability/station/activity\"\r\n        WITH DESTINATION_TOPIC \"coreflux/factory01/traceability/station/activity/result\"\r\n    ADD EVENT GetPartsAtStation\r\n        WITH QUERY \"SELECT DISTINCT p.* FROM parts p JOIN part_movements pm ON p.part_id = pm.part_id WHERE pm.to_station_id = '{payload.json.station_id}' AND pm.timestamp = (SELECT MAX(timestamp) FROM part_movements WHERE part_id = p.part_id)\"\r\n        WITH SOURCE_TOPIC \"coreflux/factory01/traceability/station/parts\"\r\n        WITH DESTINATION_TOPIC \"coreflux/factory01/traceability/station/parts/result\"\r\n    ADD EVENT CreateOperator\r\n        WITH QUERY \"INSERT INTO operators (operator_id, operator_name, badge_id, department, created_at) VALUES ('{payload.json.operator_id}', '{payload.json.operator_name}', '{payload.json.badge_id}', '{payload.json.department}', NOW()) RETURNING *\"\r\n        WITH SOURCE_TOPIC \"coreflux/factory01/traceability/operator/create\"\r\n    ADD EVENT GetOperatorInfo\r\n        WITH QUERY \"SELECT * FROM operators WHERE operator_id = '{payload.json.operator_id}'\"\r\n        WITH SOURCE_TOPIC \"coreflux/factory01/traceability/operator/get\"\r\n        WITH DESTINATION_TOPIC \"coreflux/factory01/traceability/operator/info\"\r\n    ADD EVENT ListAllOperators\r\n        WITH QUERY \"SELECT * FROM operators ORDER BY operator_name\"\r\n        WITH SOURCE_TOPIC \"coreflux/factory01/traceability/operator/list\"\r\n        WITH DESTINATION_TOPIC \"coreflux/factory01/traceability/operator/list/result\"\r\n    ADD EVENT GetSystemStats\r\n        WITH QUERY \"SELECT (SELECT COUNT(*) FROM parts) as total_parts, (SELECT COUNT(*) FROM stations) as total_stations, (SELECT COUNT(*) FROM operators) as total_operators, (SELECT COUNT(*) FROM part_movements WHERE timestamp >= NOW() - INTERVAL '24 hours') as movements_24h\"\r\n        WITH SOURCE_TOPIC \"coreflux/factory01/traceability/system/stats\"\r\n        WITH DESTINATION_TOPIC \"coreflux/factory01/traceability/system/stats/result\""
  },
  {
    "kind": 1,
    "language": "markdown",
    "value": "## 📡 Frontend \r\n\r\n### Manage a full tracebility system -> Check  http://localhost:3000\r\n\r\n<iframe src=\"http://localhost:3000\" width=\"80%\" height=\"700px\"></iframe>\r\n\r\n"
  },
  {
    "kind": 1,
    "language": "markdown",
    "value": "\r\n\r\n## 📡 MQTT API Reference\r\n\r\n### Parts Management\r\n\r\n#### Create Part\r\n```json\r\nTopic: coreflux/factory01/traceability/part/create\r\nPayload: {\r\n    \"part_id\": \"PART001\",\r\n    \"part_name\": \"Engine Block A\",\r\n    \"part_type\": \"engine_component\",\r\n    \"manufacturer\": \"AutoParts Inc\"\r\n}\r\n```\r\n\r\n#### Update Part Status\r\n```json\r\nTopic: coreflux/factory01/traceability/part/updatestatus\r\nPayload: {\r\n    \"part_id\": \"PART001\",\r\n    \"status\": \"in_production\"\r\n}\r\n```\r\n\r\n#### Get Part Information\r\n```json\r\nTopic: coreflux/factory01/traceability/part/info\r\nPayload: {\r\n    \"part_id\": \"PART001\"\r\n}\r\n```\r\n\r\n#### List All Parts\r\n```json\r\nTopic: coreflux/factory01/traceability/part/list\r\nPayload: {\r\n    \"limit\": 50\r\n}\r\n```\r\n\r\n#### Delete Part\r\n```json\r\nTopic: coreflux/factory01/traceability/part/delete\r\nPayload: {\r\n    \"part_id\": \"PART001\"\r\n}\r\n```\r\n\r\n### Station Management\r\n\r\n#### Create Station\r\n```json\r\nTopic: coreflux/factory01/traceability/station/create\r\nPayload: {\r\n    \"station_id\": \"STATION005\",\r\n    \"station_name\": \"Testing Station\",\r\n    \"station_type\": \"testing\",\r\n    \"location\": \"Building C - Floor 2\"\r\n}\r\n```\r\n\r\n#### Get Station Information\r\n```json\r\nTopic: coreflux/factory01/traceability/station/get\r\nPayload: {\r\n    \"station_id\": \"STATION001\"\r\n}\r\n```\r\n\r\n#### List All Stations\r\n```json\r\nTopic: coreflux/factory01/traceability/station/list\r\nPayload: {}\r\n```\r\n\r\n### Movement Tracking\r\n\r\n#### Record Part Movement\r\n```json\r\nTopic: coreflux/factory01/traceability/movement/record\r\nPayload: {\r\n    \"part_id\": \"PART001\",\r\n    \"from_station_id\": \"STATION001\",\r\n    \"to_station_id\": \"STATION002\",\r\n    \"movement_type\": \"transfer\",\r\n    \"operator_id\": \"OP001\",\r\n    \"notes\": \"Quality check required\"\r\n}\r\n```\r\n\r\n#### Get Part History\r\n```json\r\nTopic: coreflux/factory01/traceability/part/history\r\nPayload: {\r\n    \"part_id\": \"PART001\"\r\n}\r\n```\r\n\r\n### Verification\r\n\r\n#### Verify Part at Station\r\n```json\r\nTopic: coreflux/factory01/traceability/verification/check\r\nPayload: {\r\n    \"part_id\": \"PART001\",\r\n    \"station_id\": \"STATION002\"\r\n}\r\n```\r\n\r\n#### Get Station Activity\r\n```json\r\nTopic: coreflux/factory01/traceability/station/activity\r\nPayload: {\r\n    \"station_id\": \"STATION001\",\r\n    \"time_period\": \"24 hours\"\r\n}\r\n```\r\n\r\n#### Get Parts at Station\r\n```json\r\nTopic: coreflux/factory01/traceability/station/parts\r\nPayload: {\r\n    \"station_id\": \"STATION001\"\r\n}\r\n```\r\n\r\n### Operator Management\r\n\r\n#### Create Operator\r\n```json\r\nTopic: coreflux/factory01/traceability/operator/create\r\nPayload: {\r\n    \"operator_id\": \"OP005\",\r\n    \"operator_name\": \"Bob Wilson\",\r\n    \"badge_id\": \"BADGE005\",\r\n    \"department\": \"Assembly\"\r\n}\r\n```\r\n\r\n#### Get Operator Information\r\n```json\r\nTopic: coreflux/factory01/traceability/operator/get\r\nPayload: {\r\n    \"operator_id\": \"OP001\"\r\n}\r\n```\r\n\r\n#### List All Operators\r\n```json\r\nTopic: coreflux/factory01/traceability/operator/list\r\nPayload: {}\r\n```\r\n\r\n### System Statistics\r\n\r\n#### Get System Stats\r\n```json\r\nTopic: coreflux/factory01/traceability/system/stats\r\nPayload: {}\r\n```\r\n\r\n## 🔄 Workflow Examples\r\n\r\n### 1. Complete Part Production Flow\r\n\r\n```mermaid\r\ngraph LR\r\n    A[Create Part] --> B[Assembly Station]\r\n    B --> C[Quality Check]\r\n    C --> D[Packaging]\r\n    D --> E[Shipping]\r\n```\r\n\r\n#### Step-by-Step Implementation:\r\n\r\n1. **Create Part**\r\n```json\r\nTopic: Traceability/Parts/Create\r\nPayload: {\r\n    \"part_id\": \"PART001\",\r\n    \"part_name\": \"Engine Block A\",\r\n    \"part_type\": \"engine_component\",\r\n    \"manufacturer\": \"AutoParts Inc\"\r\n}\r\n```\r\n\r\n2. **Move to Assembly Station**\r\n```json\r\nTopic: Traceability/Movements/Record\r\nPayload: {\r\n    \"part_id\": \"PART001\",\r\n    \"to_station_id\": \"STATION001\",\r\n    \"operator_id\": \"OP001\",\r\n    \"notes\": \"Starting assembly process\"\r\n}\r\n```\r\n\r\n3. **Move to Quality Check**\r\n```json\r\nTopic: Traceability/Movements/Record\r\nPayload: {\r\n    \"part_id\": \"PART001\",\r\n    \"from_station_id\": \"STATION001\",\r\n    \"to_station_id\": \"STATION002\",\r\n    \"operator_id\": \"OP002\",\r\n    \"notes\": \"Assembly complete, ready for quality check\"\r\n}\r\n```\r\n\r\n4. **Verify Part at Quality Station**\r\n```json\r\nTopic: Traceability/Verification/Check\r\nPayload: {\r\n    \"part_id\": \"PART001\",\r\n    \"station_id\": \"STATION002\"\r\n}\r\n```\r\n\r\n### 2. Station Activity Monitoring\r\n\r\n```json\r\nTopic: Traceability/Stations/Activity\r\nPayload: {\r\n    \"station_id\": \"STATION001\",\r\n    \"time_period\": \"24 hours\"\r\n}\r\n```\r\n\r\n### 3. Part History Tracking\r\n\r\n```json\r\nTopic: Traceability/Movements/History\r\nPayload: {\r\n    \"part_id\": \"PART001\"\r\n}\r\n```\r\n\r\n## 🛠️ Integration Examples\r\n\r\n### Python MQTT Client Example\r\n\r\n```python\r\nimport paho.mqtt.client as mqtt\r\nimport json\r\n\r\n# MQTT Configuration\r\nMQTT_BROKER = \"localhost\"\r\nMQTT_PORT = 1883\r\nMQTT_TOPIC_PREFIX = \"Traceability\"\r\n\r\ndef on_connect(client, userdata, flags, rc):\r\n    print(f\"Connected with result code {rc}\")\r\n    # Subscribe to result topics\r\n    client.subscribe(f\"{MQTT_TOPIC_PREFIX}/+/+/Result\")\r\n\r\ndef on_message(client, userdata, msg):\r\n    print(f\"Received: {msg.topic} {msg.payload.decode()}\")\r\n\r\n# Create client\r\nclient = mqtt.Client()\r\nclient.on_connect = on_connect\r\nclient.on_message = on_message\r\n\r\n# Connect to broker\r\nclient.connect(MQTT_BROKER, MQTT_PORT, 60)\r\n\r\n# Create a part\r\npart_data = {\r\n    \"part_id\": \"PART001\",\r\n    \"part_name\": \"Engine Block A\",\r\n    \"part_type\": \"engine_component\",\r\n    \"manufacturer\": \"AutoParts Inc\"\r\n}\r\n\r\nclient.publish(f\"{MQTT_TOPIC_PREFIX}/Parts/Create\", json.dumps(part_data))\r\n\r\n# Start the loop\r\nclient.loop_forever()\r\n```\r\n\r\n### Node.js MQTT Client Example\r\n\r\n```javascript\r\nconst mqtt = require('mqtt');\r\n\r\n// MQTT Configuration\r\nconst MQTT_BROKER = 'mqtt://localhost:1883';\r\nconst TOPIC_PREFIX = 'Traceability';\r\n\r\n// Connect to broker\r\nconst client = mqtt.connect(MQTT_BROKER);\r\n\r\nclient.on('connect', () => {\r\n    console.log('Connected to MQTT broker');\r\n    \r\n    // Subscribe to result topics\r\n    client.subscribe(`${TOPIC_PREFIX}/+/+/Result`);\r\n    \r\n    // Create a part\r\n    const partData = {\r\n        part_id: 'PART001',\r\n        part_name: 'Engine Block A',\r\n        part_type: 'engine_component',\r\n        manufacturer: 'AutoParts Inc'\r\n    };\r\n    \r\n    client.publish(`${TOPIC_PREFIX}/Parts/Create`, JSON.stringify(partData));\r\n});\r\n\r\nclient.on('message', (topic, message) => {\r\n    console.log(`Received: ${topic} ${message.toString()}`);\r\n});\r\n```\r\n\r\n## 📈 Monitoring and Analytics\r\n\r\n### Database Views\r\n\r\nThe system includes several useful views for monitoring:\r\n\r\n#### Current Part Locations\r\n```sql\r\nSELECT * FROM current_part_locations;\r\n```\r\n\r\n#### Station Activity Summary\r\n```sql\r\nSELECT * FROM station_activity_summary;\r\n```\r\n\r\n### System Statistics\r\n\r\nGet real-time system statistics:\r\n```json\r\nTopic: Traceability/Stats/Get\r\n```\r\n\r\nResponse:\r\n```json\r\n{\r\n    \"total_parts\": 150,\r\n    \"total_stations\": 4,\r\n    \"total_operators\": 4,\r\n    \"movements_24h\": 45\r\n}\r\n```\r\n\r\n## 🔒 Security Considerations\r\n\r\n1. **Database Security**:\r\n   - Use strong passwords for database users\r\n   - Enable SSL connections in production\r\n   - Regular database backups\r\n\r\n2. **MQTT Security**:\r\n   - Use MQTT over TLS (port 8883)\r\n   - Implement authentication for MQTT clients\r\n   - Use topic-based access control\r\n\r\n3. **Network Security**:\r\n   - Restrict access to database ports\r\n   - Use VPN for remote access\r\n   - Regular security updates\r\n\r\n## 🚨 Troubleshooting\r\n\r\n### Common Issues\r\n\r\n1. **Database Connection Failed**:\r\n   - Check PostgreSQL service status\r\n   - Verify connection credentials\r\n   - Check network connectivity\r\n\r\n2. **MQTT Connection Issues**:\r\n   - Verify Coreflux Broker is running\r\n   - Check MQTT port accessibility\r\n   - Review broker logs\r\n\r\n3. **Route Events Not Working**:\r\n   - Verify route configuration\r\n   - Check event parameter mapping\r\n   - Review SQL query syntax\r\n\r\n### Log Locations\r\n\r\n- **Coreflux Logs**: `./logs/`\r\n- **PostgreSQL Logs**: Docker container logs\r\n- **pgAdmin Logs**: Docker container logs\r\n\r\n### Debug Commands\r\n\r\n```bash\r\n# Check service status\r\ndocker-compose -f docker-compose-traceability.yml ps\r\n\r\n# View logs\r\ndocker-compose -f docker-compose-traceability.yml logs coreflux-broker\r\ndocker-compose -f docker-compose-traceability.yml logs postgres\r\n\r\n# Access PostgreSQL directly\r\ndocker exec -it traceability-postgres psql -U traceuser -d traceability\r\n```\r\n\r\n## 📚 Additional Resources\r\n\r\n- [Coreflux Broker Documentation](https://docs.coreflux.org/)\r\n- [PostgreSQL Documentation](https://www.postgresql.org/docs/)\r\n- [MQTT Protocol Specification](https://mqtt.org/specification/)\r\n\r\n## 🤝 Support\r\n\r\nFor support and questions:\r\n- Check the troubleshooting section above\r\n- Review Coreflux Broker logs\r\n- Contact the development team "
  }
]